# Validator Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: validator-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: validator-service
  template:
    metadata:
      labels:
        app: validator-service
    spec:
      containers:
        - name: validator-service
          image: philpher/validator-service:latest  # Replace with your Docker image
          ports:
            - containerPort: 8080  # Adjust to your application's port

---
# Validator Service Service
apiVersion: v1
kind: Service
metadata:
  name: validator-service
spec:
  selector:
    app: validator-service
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080  # Adjust to your application's port
  type: ClusterIP  # Internal service for Prometheus to scrape

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
              readOnly: true
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
# Prometheus ConfigMap (for scraping validator-service metrics)
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'validator-service'
        static_configs:
          - targets: ['validator-service:8080']

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: NodePort  # Exposes Prometheus externally using a port on the node

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: NodePort  # Exposes Grafana externally using a port on the node
